<?php

namespace Traincase\HtmlToPdfTinker\Tests;

use Dompdf\Dompdf;
use League\Flysystem\Filesystem;
use League\Flysystem\Memory\MemoryAdapter;
use mikehaertl\wkhtmlto\Pdf;
use PHPUnit\Framework\TestCase;
use Traincase\HtmlToPdfTinker\Drivers\DompdfDriver;
use Traincase\HtmlToPdfTinker\Drivers\WkhtmltopdfDriver;
use Traincase\HtmlToPdfTinker\DTO\PdfToGenerateDTO;
use Traincase\HtmlToPdfTinker\Exceptions\PdfCouldNotBeCreatedException;
use Traincase\HtmlToPdfTinker\Tests\Util\PDF2Text;

class WkhtmltopdfDriverTest extends TestCase
{
    /** @test */
    public function it_creates_pdfs_on_the_filesystem()
    {
        $driver = new WkhtmltopdfDriver(new Pdf);
        $dto = new PdfToGenerateDTO([
            'filename' => 'test.pdf',
            'html' => '<html lang="en"><body><p>test text</p></body>',
            'options' => [],
            'path' => '/tmp',
        ]);
        $filesystem = new Filesystem(new MemoryAdapter);

        // Create PDF
        $path = $driver->storeOnFilesystem($filesystem, $dto);

        // Get generated text content in PDF
        $textContent = (new \Smalot\PdfParser\Parser)
            ->parseContent($filesystem->read($path))
            ->getText();

        $this->assertTrue($filesystem->has($path));
        $this->assertSame('application/pdf', $filesystem->getMimetype($path));

        // The kerning in the PDF generated by wkhtmltopdf is off for \Smalot\PdfParser\Parser
        // Since the generated actually shows the text 'test text', we'll ignore
        // this issue for now. A pull request which takes care of this issue
        // will be accepted if it is of sufficient quality.
        // Note: also need to update parser in DOMPDF
        // $this->assertSame('test text', $textContent);
    }

    /** @test */
    public function it_throws_an_exception_when_path_is_invalid()
    {
        $this->expectException(PdfCouldNotBeCreatedException::class);
        $this->expectExceptionMessage('Wkhtmltopdf could not create PDF');

        $driver = new WkhtmltopdfDriver(new Pdf);
        $dto = new PdfToGenerateDTO([
            'filename' => 'test.pdf',
            'html' => '<html lang="en"><body><p>test text</p></body>',
            'options' => [],
            'path' => '../../../../outside-of-filesystem',
        ]);
        $filesystem = new Filesystem(new MemoryAdapter);

        // Try to create PDF outside of valid filesystem
        $path = $driver->storeOnFilesystem($filesystem, $dto);
    }

    /**
     * @test
     * @todo Improve this test, it should not override the driver itself.
     */
    public function it_throws_an_exception_when_wkhtmltopdf_doesnt_create_a_pdf()
    {
        $this->expectException(PdfCouldNotBeCreatedException::class);
        $this->expectExceptionMessage('Wkhtmltopdf could not create PDF');

        $corruptedWk = new class extends Pdf {
            public function toString()
            {
                return false;
            }
        };
        $driver = new WkhtmltopdfDriver($corruptedWk);
        $dto = new PdfToGenerateDTO([
            'filename' => 'test.pdf',
            'html' => '<html lang="en"><body><p>test text</p></body>',
            'options' => [],
        ]);
        $filesystem = new Filesystem(new MemoryAdapter);

        // Try to create PDF outside of valid filesystem
        $path = $driver->storeOnFilesystem($filesystem, $dto);
    }
}
